// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String?  @unique
  password  String?
  role      Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  Product  Product[]  @relation("product_to_user")
  Cart     Cart[]
  Review   Review[]
  Wishlist Wishlist[]
  Brand    Brand[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            Int        @id @default(autoincrement())
  title         String     @db.VarChar(255)
  description   String     @db.Text
  category      String
  style         String
  store         String
  size          String
  inventory     Int
  color         String
  maxPrice      Float      @default(0)
  minPrice      Float      @default(0)
  image         Json
  userId        Int
  slug          String     @unique @db.VarChar(255)
  averageRating Float      @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  user          User       @relation(name: "product_to_user", fields: [userId], references: [id], onDelete: Cascade)
  cartItems     CartItem[]
  Review        Review[]
  Wishlist      Wishlist[]

  @@index([userId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Color {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Size {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Style {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    CartStatus @default(PENDING)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  color     String
  size      String
  price     Float   @default(0)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size, color], name: "cart_item_unique_index")
  @@index([productId, cartId])
}

enum CartStatus {
  PENDING
  COMPLETED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "unique_review_per_user")
  @@index([productId])
  @@index([userId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  image     Json
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
